Index: tasks/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nfrom django.http import JsonResponse\r\nfrom django.shortcuts import get_object_or_404, render\r\nfrom .models import *\r\nfrom django.utils import timezone\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom datetime import date, timedelta\r\n\r\n\r\n@login_required\r\ndef delete_task(request, task_id):\r\n    user = request.user\r\n    remind_task(request)\r\n    task = get_object_or_404(Tasks, id=task_id, user=user)\r\n    task.delete()\r\n    return JsonResponse({'success': True})\r\n\r\n\r\n@login_required\r\ndef remind_task(request):\r\n    remind_deadline = date.today()\r\n    reminders = Tasks.objects.filter(deadline=remind_deadline, is_completed=False).values()\r\n    return JsonResponse({'reminders': list(reminders)})\r\n\r\n\r\n@login_required\r\ndef forgotten_task(request):\r\n    forget_deadline = date.today()\r\n    forgottens = Tasks.objects.filter(deadline__lt=forget_deadline, is_completed=False).values()\r\n    return JsonResponse({'reminders': list(forgottens)})\r\n\r\n\r\n@login_required\r\ndef delete_tasks_from_folder(request):\r\n    user = request.user\r\n    folders = user.folders.all()\r\n\r\n    for folder in folders:\r\n        folder.tasks.all().delete()\r\n\r\n    return JsonResponse({'success': True})\r\n\r\n\r\n'''def main_page(request):\r\n    return JsonResponse({'success': True})'''\r\n\r\n\r\ndef index(request):\r\n    data =  {\r\n        'title' : 'Главная страница',\r\n    }\r\n    return render(request, 'tasks/index.html', data)\r\n\r\n\r\n@login_required\r\ndef sort_by_priority(request):\r\n    user = request.user\r\n    tasks = Tasks.objects.filter(user=user).order_by('priority').values()\r\n    return JsonResponse({'tasks':  list(tasks)})\r\n\r\n\r\n@login_required\r\ndef sort_by_status(request):\r\n    user = request.user\r\n    tasks = Tasks.objects.filter(user=user).order_by('is_completed').values()\r\n    return JsonResponse({'tasks':  list(tasks)})\r\n\r\n\r\n@login_required\r\ndef sort_by_title(request):\r\n    user = request.user\r\n    tasks = Tasks.objects.filter(user=user).order_by('title').values()\r\n    return JsonResponse({'tasks':  list(tasks)})\r\n\r\n\r\n@login_required\r\ndef sort_by_folders(request):\r\n    user = request.user\r\n    tasks = Tasks.objects.filter(user=user).order_by('folders').values()\r\n    return JsonResponse({'tasks':  list(tasks)})\r\n\r\n\r\n@login_required\r\ndef sort_by_deadline(request):\r\n    user = request.user\r\n    tasks = Tasks.objects.filter(user=user).order_by('deadline').values()\r\n    return JsonResponse({'tasks':  list(tasks)})\r\n\r\n\r\n@login_required\r\ndef filter_by_priority(request):\r\n    user = request.user\r\n    priority = request.GET.get('priority')\r\n    tasks = Tasks.objects.all().filter(priority=priority, user=user).values()\r\n    return JsonResponse({'tasks':  list(tasks)})\r\n\r\n\r\n@login_required\r\ndef filter_by_deadline(request):\r\n    user = request.user\r\n    deadline = request.GET.get('deadline')\r\n    tasks = Tasks.objects.all().filter(deadline__startswith=deadline, user=user).values()\r\n    return JsonResponse({'tasks':  list(tasks)})\r\n\r\n\r\n@login_required\r\ndef filter_by_folders(request):\r\n    user = request.user\r\n    folders = request.GET.get('folders')\r\n    tasks = Tasks.objects.all().filter(folders=folders, user=user).values()\r\n    return JsonResponse({'tasks':  list(tasks)})\r\n\r\n\r\n@login_required\r\ndef filter_by_status(request):\r\n    user = request.user\r\n    is_completed = request.GET.get('is_completed')\r\n    tasks = Tasks.objects.all().filter(is_completed=is_completed, user=user).values()\r\n    return JsonResponse({'tasks':  list(tasks)})\r\n\r\n\r\n@login_required\r\ndef get_now_week(request):\r\n    today = date.today()\r\n    user = request.user\r\n    start_of_week = today - timedelta(days=today.weekday())\r\n    end_of_week = start_of_week + timedelta(days=6)\r\n    tasks = Tasks.objects.filter(data_add__range=[start_of_week, end_of_week], user=user).values()\r\n    return JsonResponse({'tasks':  list(tasks)})\r\n\r\n\r\n@login_required\r\ndef get_now_month(request):\r\n    today = date.today()\r\n    user = request.user\r\n    start_of_month = today.replace(day=1)\r\n    if today.month == 12:\r\n        end_of_month = today.replace(month=12, day=31)\r\n    else:\r\n        next_month = today.replace(month=today.month + 1, day=1)\r\n        end_of_month = next_month - timedelta(days=1)\r\n    tasks = Tasks.objects.filter(data_add__range=[start_of_month, end_of_month], user=user).values()\r\n    return JsonResponse({'tasks':  list(tasks)})\r\n\r\n\r\ndef add_task(request):\r\n    if request.method == 'POST':\r\n        user = request.user\r\n\r\n        if not User.objects.filter(pk=user.id).exists():\r\n            return JsonResponse({'message': 'No find such user'}, status=400)\r\n\r\n        try:\r\n            data = json.loads(request.body)\r\n            title = data.get('title')\r\n            full_text = data.get('full_text')\r\n            deadline = data.get('deadline')\r\n            #folder = data.get('folder')\r\n            priority = data.get('priority')\r\n            is_completed = data.get('is_completed', False)\r\n\r\n        except json.JSONDecodeError:\r\n            return JsonResponse({'message': 'Invalid JSON format'}, status=400)\r\n\r\n        #if not title and not full_text and not deadline and not folder and not priority:\r\n        if not title and not full_text and not deadline and not priority:\r\n            return JsonResponse({'message': 'No find such task'}, status=400)\r\n\r\n        if is_completed == True:\r\n            data_complete = timezone.now()\r\n        else:\r\n            data_complete = None\r\n\r\n        data_create = timezone.now()\r\n\r\n        Tasks.objects.create(\r\n            user=user,\r\n            title=title,\r\n            full_text=full_text,\r\n            data_create=data_create,\r\n            deadline=deadline,\r\n            #folder=folder,\r\n            priority=priority,\r\n            is_completed=is_completed,\r\n            data_complete=data_complete\r\n        )\r\n\r\n        return JsonResponse({'message': 'Good job'}, status=201)\r\n\r\n    else:\r\n        return JsonResponse({'message': 'This method false'}, status=400)\r\n\r\n\r\n@login_required\r\ndef task_completed(request, task_id):\r\n    task = get_object_or_404(Tasks, id=task_id)\r\n    task.mark_as_completed()\r\n    return JsonResponse({\"success\": True})\r\n\r\n\r\n@login_required\r\ndef get_now_four_days(request):\r\n    today = date.today()\r\n    user = request.user\r\n    offset = int(request.GET.get('offset', 0))\r\n    start = today + timedelta(days=offset)\r\n    finish = start + timedelta(days=3)\r\n    tasks = Tasks.objects.filter(data_add__range=[start, finish], user=user).values()\r\n    return JsonResponse({'tasks':  list(tasks)})
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tasks/views.py b/tasks/views.py
--- a/tasks/views.py	(revision 603bd30ee2174bed7a5696986c98ab499dbc8f17)
+++ b/tasks/views.py	(date 1732913140166)
@@ -155,7 +155,11 @@
             title = data.get('title')
             full_text = data.get('full_text')
             deadline = data.get('deadline')
-            #folder = data.get('folder')
+            folder = data.get('folder')
+            subtask_one = data.get('subtask_one')
+            subtask_two = data.get('subtask_two')
+            subtask_three = data.get('subtask_three')
+            subtask_four = data.get('subtask_four')
             priority = data.get('priority')
             is_completed = data.get('is_completed', False)
 
@@ -179,10 +183,14 @@
             full_text=full_text,
             data_create=data_create,
             deadline=deadline,
-            #folder=folder,
+            folder=folder,
             priority=priority,
             is_completed=is_completed,
-            data_complete=data_complete
+            data_complete=data_complete,
+            subtask_one=subtask_one,
+            subtask_two=subtask_two,
+            subtask_three=subtask_three,
+            subtask_four=subtask_four
         )
 
         return JsonResponse({'message': 'Good job'}, status=201)
